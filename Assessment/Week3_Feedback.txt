Starting weekly assessment for Emma, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 59.65 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, week4, Assessment, week3, week6, project, Week2, week9, week7, week5, .git, rda files, week8, error:output files

Found the following files in parent directory: edeeks_HPC_2019.zip, .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~
*.tmp
*.bbl
*.blg
*.pdf
*.aux
*.log
__pycache__
.DS_Store
.Rapp.history
<<<<<<< HEAD
.Rhistory
*.rda
*.sh.*
project/data 
project/data/Chagos_ALL_acoustic_2019.txt 
project/data/shape_files
. -size +50M
=======
.Rhistory
>>>>>>> 0d7590ae85f1493548f944ace5922e4c47068ab7
week8/code/.ipynb_checkpoints/FunRes-checkpoint.ipynb
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# CMEE Coursework Repository- README.md 


Files included: 
### week1: 
Unix Week:  Learnt the basics of UNIX including shell scripting, key commands such as grep and running functions. 
### week2: Focuses on the basics of Python; Topics covered include:
	- Basics of python syntax and data structures
	- Python's object-oriented features
	- How to write and run python code
	- Understand and implement python control flow tools
	- Learning to use the ipython environment 
	- Writing, debugging, using, and testing python functions 
	- Learning efficient numerical programming in python
	- Using regular expressions in python
	- Introduction to certain particularly useful python packages
	- Using python for building and modifying databases
	- Using python to run other, non-python tasks and code
	- Using python to patch together data analysis and/or numerical simulation work flows
### week3: 
Focuses on the basics of R as well as data exploration, management and visualisation; Topics covered include:
	- Basic R syntax and programming conventions assuming you have never set your eyes on R
	- Principles of data processing and exploration (including visualization) using R
	- Principles of clean and efficient programming using R
	- To generate publication quality graphics in R
	- To develop reproducible data analysis "work flows" so you (or anybody else) can run and re-run your analyses, graphics outputs and all, in R
	- To make R simulations more efficient using vectorization
	- To find and fix errors in R code using debugging
	- To make data wrangling and analyses more efficient and convenient using custom tools such as tidyr
	- Some additional tools and topics in R (accessing databases, building your own packages, etc.).
### week4
Stats week

### week5
GIS week
### week6
Miniproject week
### week7
Python II 
### week8
HPC week 

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week2, week3, week4, week5, week6, week7, week8, week9

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: code, sandbox, data, Results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
# CMEE Coursework Repository- README.md 

##  Week3: 

Focuses on the basics of R as well as data exploration, management and visualisation; Topics covered include:
- Basic R syntax and programming conventions assuming you have never set your eyes on R
- Principles of data processing and exploration (including visualization) using R
- Principles of clean and efficient programming using R
- To generate publication quality graphics in R
- To develop reproducible data analysis "work flows" so you (or anybody else) can run and re-run your analyses, graphics outputs and all, in R
- To make R simulations more efficient using vectorization
- To find and fix errors in R code using debugging
- To make data wrangling and analyses more efficient and convenient using custom tools such as tidyr
- Some additional tools and topics in R (accessing databases, building your own packages, etc.).

### Code: Bold scripts are part of the practical coursework for week 3

| Script       | Function     | Input     | Output    |
| :------------- | :----------: | -----------: |-----------: |
|  `apply1.R` |  Builds a random matrix  |  No input  |  Calculates mean of each row in matrix  |
|  `apply2.R` |  Function of if statement that states if a number is lower than 0 multiple it by 100  |  Manual input not essential but can put number/matrix for function to be applied over  |  Matrix of random numbers function has been applied over  |
|  `AutoCorr.tex` |  Latex document produced as a result of the Auto Correlation practical in weather  |  No input  |  Completed Latex document  |
|  `basic_io.R` |  Script to illustrate the different ways to write in a file and different parameters  |  No manual input required but uses trees.csv data from data directory  |  csv file names MyData in global environment  |
|  `boilerplate.R` |  Illustrates how R functions work  | Two arguments defined within script   |  Class of inputs  |
|  `break.R` |  Script showing how to break out of loop  |  No input   |  Depending on if value is equal to 10 will output what number is equal to  |
|  `browse.R` |  Function that shows a different way of debugging by running a simulation of exponential growth and returning a vector of generations before plotting it. Shows how to use break to run through the code line by line and debug.  |  Once run you can input code to navigate the break function   |  first iteration of the for loop and the console will enter the browser mode then allows manual debugging  |
|  `control_flow.R` |  Illustrates the use of if statements, while loops and for loops.  |  No input  |  The results from each loop illustrated  |
|  `DataWrang.R` |  Script illustrating how to 'wrangle' data using the reshape2 package and other functions in R  |  No manual input required but uses the PoundHillData.csv and PoundHillMetaData.csv from data  |  Both inputted datasets are in an improved format and under variable names 'MyData' and 'MyMetaData' respectively  |
|  **`DataWrangTidy.R`** |  Script illustrating how to 'wrangle' data using the 'dplyr' and 'tidyr' package and other functions in R  |  No manual input required but uses the PoundHillData.csv and PoundHillMetaData.csv from data  |  Both inputted datasets are in an improved format and under variable names 'MyData' and 'MyMetaData' respectively  |
|  `get_Tree_Height.py` |  Function that calculates heights of trees given distance of each tree from its base and angle to its top, using  the trigonometric formula |  Degrees and distance but not required manually as there is a default of 'trees.csv' from data  |  Heights of the tree, same units as distance  |
|  `get_Tree_Height.R` |  Function that calculates heights of trees given distance of each tree from its base and angle to its top, using  the trigonometric formula  |  Degrees and distance but not required manually as there is a default of 'trees.csv' from data  |  Heights of the tree, same units as distance  |
|  `Girko.R` |  Function that returns an eclipse  |  No input  |  Girko.pdf in results with eclipse |
|  `GPDD_Data.R` |  Loads and plots the species abundance worldwide using the maps package and saves it as a pdf  |  Uses GPDDFiltered.RData in data  |  Species abundance worldwide  |
|  `MyBars.R` |  Script that builds a plot and saves as a pdf  |  Text file of Resuts.txt from data directory  |  pdf called 'MyBars.pdf' in results directory  |
|  `next.R` |  A for loop that runs through 1-10 and prints each number  |  No input  |  i in for loop  |
|  `plotLin.R` |  A script that plots data and adds linear regression line  |  No input  |  pdf called 'MyLinReg.pdf' in results  |
|  **`PP_Lattice.R`** |  Script that makes three pdf lattices of prey mass, predator mass and the size ratio of prey mass over predator mass. Script also calculates the mean, median and log of these for prey mass, predator mass and size ratio into a csv file. Script calculates this for the data subsetted by feeding type  |  EcolArchives-E089-51-D1.csv from data- no manual input  |  3 pdf and a csv file with values  |
|  **`PP_Regress_loc.R`** |  Script that  calculates the regression of data when its been subsetted three times and outputs the results to a table in csv format |  EcolArchives-E089-51-D1.csv from data- no manual input   |  csv file with the linear results; 'PP_Regress_loc_Results.csv' in results directory   |
|  **`PP_Regress.R`** |  Script that creates and saves a graph as a pdf file that exactly replicates a graph and also calculates the regression of the data when its been subsetted two times and outputs the results to a table  |   EcolArchives-E089-51-D1.csv from data- no manual input   |  PDF file of replicate graph; 'PP_Regress.pdf' and also csv file with the linear results; 'PP_Regress_Results.csv' in results directory  | 
|  `preallocate.R` | Illustrating the speed of allocation with one loop having preallocated values and one not |  No input  |  Speeds of two for loops   |
|  `Ricker.R` |  A vectorization challenge that runs a simulation of the Ricker model and returns a vector of length generations  |  No input  |  Plots Ricker model  |
|  `sample.R` |  Example script of using vectorization involving lapply and sapply. Also times the different functions under a vectorized and looped approach to lapply and sapply.  |  No input  |  The result of the functions using loops and vectorisation as well as the time taken to run each function with apply, vectorization and preallocation  |
|  `SQLinR.R` |  Script to demonstrate how data can be used to access update and manage databases easily  |  Has default data entry  |  No output as dataframes removed from global environment after script is run  |
|  **`TAutoCorr.R`** |  An exercise in correlation coefficients and P-values. Calculates the correlation between n-1 pairs of years in temperature, script loads the KeyWestAnnualMeanTemperature data using load and computes the coefficient for this data before randomly shuffling the data 10000 times to randomly permute the time series and then recalculate the correlation coefficient for each randomly permuted year sequence and storing it.  |  No manual input but uses the KeyWestAnnualMeanTemperature data   |  The fraction of the correlation coefficients from the previous step were greater that that from step 1. Also out outputs a Latex file interpreting results. Also outputs pdf of graph for lattice. |
|  **`get_TreeHeight.R`** |  Calculates heights of trees given distance of each tree from its base and angle to its top, using  the trigonometric formula  |You must input the name of the csv file but not the .csv at the end e.g. if your trees data is found in the data directory and is called trees.csv you only need to put trees into the command line e.g. Rscript get_TreeHeight.R trees |  TreeHts.csv in results containing tree heights data appended onto trees.csv  |
|  `try.R` |  Demonstrates how to use try to catch errors in script- Runs a simulation that involves sampling from a synthetic population with replacement and takes its mean, but only if at least 30 unique samples are obtained   |  No input  |  Prints errors in script to variable  |
|  **`Vectorize1.py`** |  A vectorisation example which compares the time taken to run a vectorisation function compared to a loop, this script is the python version of 'Vectorize1.R' |  No input  |  Time taken for loop and in build vectorisation function to run  |
|  `Vectorize1.R` |  A vectorisation example which compares the time taken to run a vectorisation function compared to a loop   |  No input  |  Time taken for loop and in build vectorisation function to run  |
|  **`Vectorize2.py`** |  Two scripts, one stochastic Ricker model and an improved version of this model which is vectorised, this script is the python version of 'Vectorize2.R'   |  No input  |  Speed comparison of both scripts |
|  **`Vectorize2.R`** |  Two scripts, one stochastic Ricker model and an improved version of this model which is vectorised  |  No input  |  Speed comparison of both scripts  |


### Data: 

    	EcolArchives-E089-51-D1.csv: For Lattice practicals 
    	GPDDFiltered.RData: For mapping practical
    	KeyWestAnnualMeanTemperature.RData: Autocorrelate practicals
    	PoundHillData.csv: Data Wrangling practicals
    	PoundHillMetaData.csv: Data Wrangling practicals
    	trees.csv: Tree Height practicals 

### Results: 
Where the results from scripts are stored
	
 #### Sandbox: 
 A practice directory for rough work and practice 
 
  ## Additional notes on packages required for scripts: 
  To run all R scripts the associated packages are required: 
  -  DataWrang.R: reshape2
  -  DataWrangTidy.R: dplyr and tidyr
  -  get_Tree_Height.py: math, os, sys, csv, scipy as sc
  -  GPDD_Data.R: maps
  -  PP_Lattice.R: lattice
  -  PP_Regress.R: ggplot2
  -  SQLinR.R: sqldf
  -  Vectorize1.py: time, numpy as np
  -  Vectorize2.py: random, numpy as np, time 
    
    
    
    
    **********************************************************************

Found following files in results directory: ...

Found 32 code files: browse.R, PP_Regress.R, Vectorize2.py, apply1.R, sample.R, control_flow.R, run_get_TreeHeight.sh, get_TreeHeight.py, GPDD_Data.R, boilerplate.R, TreeHeight.R, PP_Lattice.R, next.R, Ricker.R, Girko.R, Vectorize1.R, SQLinR.R, break.R, plotLin.R, basic_io.R, Vectorize1.py, try.R, apply2.R, AutoCorr.tex, get_TreeHeight.R, TAutoCorr.R, Vectorize2.R, DataWrangTidy.R, preallocate.R, PP_Regress_loc.R, DataWrang.R, MyBars.R

Found the following extra files: Rplots.pdf, Test.sqlite
0.5 pt deducted per extra file

Current Points = 99.0

======================================================================
Testing script/code files...

======================================================================
Inspecting script file browse.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: browse.R
#Desc: Function that shows a different way of debugging by running a simulation of exponential 
#growth and returning a vector of generations before plotting it. Shows how to use break to run through the code line by line and debug.
#Arguments: Once run you can input code to navigate the break function
#Outputs: first iteration of the for loop and the console will enter the browser mode then allows manual debugging
#Date: Oct 2019  

#Runs a simulation of exponential growth 
#Runs a vector of length generations 

Exponential <- function(NO = 1, r=1, generations = 10){ #inputs into function
  N <- rep(NA, generations) #Creates a vector 
  N[1] <- NO
  for (t in 2:generations){
    N[t] <- N[t-1] * exp(r)
    browser() #This opens the debugger and takes you to the interactive bedugging part 
  }
  return(N)
}

plot(Exponential(), type = "1", main = "Exponential growth")
#Runs the first iteration of the for loop and the console will enter the browser mode
#Once in browser mode you can debug like in python by running through each line of code 
#E.g. n: single step, c: exit browser and continue, Q: exit browser and abort, return to top level**********************************************************************

Testing browse.R...

Output (only first 500 characters): 

**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Encountered error (or warning):
Error in plot.xy(xy, type, ...) : invalid plot type '1'
Calls: plot -> plot.default -> plot.xy
Execution halted

======================================================================
Inspecting script file PP_Regress.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: PP_Regress.R
#Desc: Script that creates and saves a graph as a pdf file that exactly replicates a graph 
#and also calculates the regression of the data when its been subsetted two times and outputs the results to a table	
#Arguments: EcolArchives-E089-51-D1.csv from data- no manual input
#Outputs: PDF file of replicate graph; 'PP_Regress.pdf' and also csv file with the linear results; 'PP_Regress_Results.csv' in results directory
#Date: Oct 2019  

# Script that creates and saves a graph as a pdf file that exactly replicates a graph
#also calculates the regression of the data when its been subsetted two times and outputs the results to a table called PP_Regress_Results.csv.
#Output: PDF file of replicate graph and also csv file with the linear results
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

require(ggplot2)
#This is the correct code
#starts a pdf and plots the graph in a faceted way which is subsetted by the feeding type
#Assigns axis titles
#Seperates the colour based on Predator lifestage, changes shape of points as well as size
#geom smooth using linear regression
#theme bw assumes a basic output
#Puts figure legend at the bottom
#Puts the horizontal key flat and turns off the pdf and saves it
pdf("../results/PP_Regress.pdf")
print(qplot(Prey.mass, Predator.mass, facets = Type.of.feeding.interaction ~., data = MyDF, log="xy",
      xlab= "Prey Mass in grams", ylab= "Predator Mass in grams",
      colour = Predator.lifestage, shape = I(3), alpha = I(.5)) +
  geom_smooth(method = "lm",fullrange= TRUE) +
  theme_bw() +
  theme(legend.position="bottom", panel.border = element_rect(colour = "grey"), legend.title = element_text(size=9, face = "bold")) +
  guides(colour = guide_legend(nrow = 1)))
dev.off()

############## csv ##############
#Creates an empty dataframe

Orange = as.data.frame(matrix(nrow = 1, ncol = 7))

#For loop that uses two inputs to the for loop which is the two things you are subsetting
# i is assigned to the predator lifestage subset of the data and j is assigned to feeding interaction 
#t is the variable for the data once its been subsetted once, and predator lifestage is assigned to i
#and then subsetted again and type of feeding interaction is assigned to j
#a linear regression is run on the subsette ddata
#p is a variable that then puts the outputs of the vector in order
#p then goes into the re made dataframe.
for(i in levels(MyDF$Predator.lifestage)){
  for(j in levels(MyDF$Type.of.feeding.interaction)){
    t = subset(MyDF, MyDF$Predator.lifestage == i) #subset data by first subset 
    t = subset(t, t$Type.of.feeding.interaction == j) #subset subsetted data again 
    if (dim(t)[1] > 0){ #excludes data with less than two points as linear regression wont run 
    mylm <- summary(lm(Predator.mass~Prey.mass, data = t)) # runs linear regression 
    p <- c(i,j,mylm$coefficients[1], mylm$coefficients[2], mylm$adj.r.squared, mylm$fstatistic[1], mylm$coefficients[8])
    Orange = rbind(Orange, p) #puts the variable of the subsetted elements for the iteration of the linear regression into the orange dataframe 
    }
  }
}

#takes off certain rows and then writes csv to a file
Orange <- Orange[-c(1, 17),]
#sets colnames 
colnames(Orange) <- c("Predator_Lifestage", "Feeding_interaction", "Intercept", "Slope", "Adjusted_R_sequared", "FStat", "Pvalue")
#writes csv 
write.csv(Orange, file = "../results/PP_Regress_Results.csv")
**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Loading required package: ggplot2
Error in pdf("../results/PP_Regress.pdf") : 
  cannot open file '../results/PP_Regress.pdf'
Execution halted

======================================================================
Inspecting script file Vectorize2.py...

File contents are:
**********************************************************************
#!/usr/bin/python

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: Vectorize2.py
#Desc: Two scripts, one stochastic Ricker model and an improved version of this model which is vectorised, 
#this script is the python version of 'Vectorize2.R'
#Arguments: No input
#Outputs:Speed comparison of both scripts
#Date: Oct 2019  

""" Two scripts, one stochastic Ricker model and an improved version of this model which is vectorised, 
this script is the python version of 'Vectorize2.R'"""

#Import random for generating random distributions 
#Import numpy for functions for maths- number python
#Import time for timing two functions 
import random
import numpy as np
import time 

#The Stochastic Ricker Model defined by Samraat in R and converted to Python

def stochrick():
  """ defines the stochrick richer model """
    p0= [] #Start population
    for i in range(0,1000):
        nextvalue = random.uniform(0.5,1.5)
        p0.append(nextvalue) #Generate a list of 1000 random numbers from 0.5-1.5 
    r=1.2 #variable r with 1.2- intrinsic growth rate 
    K=1  #Carrying capacity 
    sigma=0.2 #The SD in the random distribution generated- setting the SD for stochasicity
    numyears=100 #defining length of model 
    N = np.zeros((numyears,len(p0))) #Generate a list of 100 years 
    N[0] = p0 #matrix of population with year- start population 
    for pop in range(0,len(p0)):#loop through the populations

        for yr in range(1,numyears): #for each pop, loop through the years

            N[yr,pop] = N[yr-1,pop] * np.exp(r * (1 - N[yr - 1,pop] / K) + np.random.normal(0.5,sigma)) #Ricker model

    return(N)


###### Improved function ########

def stochrickvect():
  """ defines the vectorised Stochastic Ricker Model """
    p0= []
    for i in range(0,1000):
        nextvalue = random.uniform(0.5,1.5)
        p0.append(nextvalue)
    r=1.2
    K=1
    sigma=0.2
    numyears=100
    N = np.zeros((numyears,len(p0)))
    N[0] = p0
    for yr in range(1,numyears): #for each pop, loop through the years

            N[yr,] = N[yr-1,] * np.exp(r * (1 - N[yr - 1,] / K) + np.random.normal(0.5,sigma))

    return(N)

#This is vectorised because instead of indexing with population and years 
#The improved version just vecotrises the function by only using year and then 
#the model just runs the whole way down each column as oppose to 

# Comapares times of the ricker model 
start_time = time.time()
stochrick()
runningtime = time.time() - start_time
print("Stochastic Ricker takes:", runningtime)

# Comapres times of the vectorised ricker model 
# THIS IS MUCH QUICKER 
start_time = time.time()
stochrickvect()
runningtime = time.time() - start_time
print("Vectorized Stochastic Ricker takes:", runningtime)
**********************************************************************

Testing Vectorize2.py...

Vectorize2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
  File "Vectorize2.py", line 25
    p0= [] #Start population
    ^
IndentationError: unexpected indent

======================================================================
Inspecting script file apply1.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: apply1.R
#Desc: Builds a random matrix
#Arguments: No input
#Outputs: Calculates mean of each row in matrix
#Date: Oct 2019  

#Function: Builds a random matrix 
#and makes a mean of each row in that matrix. 

## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row and prints it
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance and prints it
RowVars <- apply(M, 1, var)
print (RowVars)

# By column and prints it 
ColMeans <- apply(M, 2, mean)
print (ColMeans)
**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 

**********************************************************************
 [1]  0.20369335 -0.14460412  0.33109971  0.35473034 -0.38173215 -0.06186087
 [7]  0.25768937 -0.11567265  0.28963812 -0.05000799
 [1] 0.4978376 0.8233704 0.5647046 0.9285525 2.0313754 1.2909285 1.4049073
 [8] 1.7073223 0.7777309 0.5927450
 [1]  0.468397693 -0.521998230  0.452549900 -0.006277876 -0.648052521
 [6] -0.058000450  0.215178730  0.379537247  0.247095129  0.154543486

**********************************************************************

Code ran without errors

Time consumed = 0.10599s

======================================================================
Inspecting script file sample.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: sample.R
#Desc: Example script of using vectorization involving lapply and sapply. 
#Also times the different functions under a vectorized and looped approach to lapply and sapply.
#Arguments: No input	
#Outputs: The result of the functions using loops and vectorisation as well as the time taken to run each function with apply,
#vectorization and preallocation
#Date: Oct 2019  

######### Functions ##########
# Function: Example script of using vectorization involving lapply and sapply. 


## A function to take a sample of size n from a population "popn" and return its mean
myexperiment <- function(popn,n){
  pop_sample <- sample(popn, n, replace = FALSE)
  return(mean(pop_sample))
}

## Calculate means using a for loop without preallocation:
loopy_sample1 <- function(popn, n, num){
  result1 <- vector() #Initialize empty vector of size 1
  for(i in 1:num){
    result1 <- c(result1, myexperiment(popn, n))
  }
  return(result1)
}

## To run "num" iterations of the experiment using a for loop on a vector with preallocation:
loopy_sample2 <- function(popn, n, num){
  result2 <- vector(,num) #Preallocate expected size
  for(i in 1:num){
    result2[i] <- myexperiment(popn, n)
  }
  return(result2)
}

## To run "num" iterations of the experiment using a for loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num){
  result3 <- vector("list", num) #Preallocate expected size
  for(i in 1:num){
    result3[[i]] <- myexperiment(popn, n)
  }
  return(result3)
}


## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num){
  result4 <- lapply(1:num, function(i) myexperiment(popn, n))
  return(result4)
}

## To run "num" iterations of the experiment using vectorization with lapply:
sapply_sample <- function(popn, n, num){
  result5 <- sapply(1:num, function(i) myexperiment(popn, n))
  return(result5)
}

popn <- rnorm(1000) #Generate the population
hist(popn)
n <- 20 # sample size for each experiment
num <- 100 # Number of times to rerun the experiment

n <- 20 # sample size for each experiment
num <- 1000 # Number of times to rerun the experiment


#Times the time taken for script to run 
print("The loopy, non-preallocation approach takes:" )
print(system.time(loopy_sample1(popn, n, num)))

print("The loopy, but with preallocation approach takes:" )
print(system.time(loopy_sample2(popn, n, num)))

print("The loopy, non-preallocation approach takes:" )
print(system.time(loopy_sample3(popn, n, num)))

print("The vectorized sapply approach takes:" )
print(system.time(sapply_sample(popn, n, num)))

print("The vectorized lapply approach takes:" )
print(system.time(lapply_sample(popn, n, num)))
**********************************************************************

Testing sample.R...

Output (only first 500 characters): 

**********************************************************************
[1] "The loopy, non-preallocation approach takes:"
   user  system elapsed 
  0.028   0.004   0.032 
[1] "The loopy, but with preallocation approach takes:"
   user  system elapsed 
  0.016   0.000   0.014 
[1] "The loopy, non-preallocation approach takes:"
   user  system elapsed 
  0.012   0.004   0.013 
[1] "The vectorized sapply approach takes:"
   user  system elapsed 
  0.012   0.000   0.011 
[1] "The vectorized lapply approach takes:"
   user  system elapsed 
  0.012   0.000   0.011 

**********************************************************************

Code ran without errors

Time consumed = 0.29527s

======================================================================
Inspecting script file control_flow.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: control_flow.R
#Desc: Illustrates the use of if statements, while loops and for loops.
#Arguments: No input
#Outputs: The results from each loop illustrated
#Date: Oct 2019  

## If statement

a <- TRUE # assigns a to variable TRUE 
if (a == TRUE){
  print ("a is TRUE") # If a is equal to true then print but if not print false
} else {
  print ("a is FALSE")
}

## If statement on a single line
z <- runif(1) ## uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}

## For loop using a sequence
for (i in 1:10){
  j <- i * i
  print(paste(i, " squared is", j)) # prints result of calculation 
}

## For loop over vector of strings
for(species in c('Heliodoxa rubinoides',
                 'Boissonneaua jardini',
                 'Sula nebouxii')){
  print(paste('This species is', species)) # prints species
}

## for loop using a vector
v1 <- c("a", "bc", "def")
for (i in v1){
  print(i)
}

## While loop
i <- 0
while (i<10){
  i <- i+1
  print(i^2)
}

**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 

**********************************************************************
[1] "a is TRUE"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
[1] "This species is Heliodoxa rubinoides"
[1] "This species is Boissonneaua jardini"
[1] "This species is Sula nebouxii"
[1] "a"
[1] "bc"
[1] "def"
[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100

**********************************************************************

Code ran without errors

Time consumed = 0.13642s

======================================================================
Inspecting script file run_get_TreeHeight.sh...

File contents are:
**********************************************************************
#!/bin/bash

# Author: Emma Deeks
# Script: run_get_TreeHeight.sh
# Desc: runs both of the python and R scripts of get_TreeHeights from the command line.
#gets Tree Heights from input file and saves
# Arguments: 1 -> .csv file
# Date: 30 October 2019

## 
echo "Creating .csv file with calculated tree heights"

#runs both of the python and R scripts of get_TreeHeights from the command line 
args <- commandArgs()
print(args)

Rscript get_TreeHeight.R trees

python3 get_TreeHeight.py trees

echo "Done!"
exit**********************************************************************

Testing run_get_TreeHeight.sh...

Output (only first 500 characters): 

**********************************************************************
Creating .csv file with calculated tree heights

**********************************************************************

Encountered error (or warning):
run_get_TreeHeight.sh: line 14: syntax error near unexpected token `('
run_get_TreeHeight.sh: line 14: `args <- commandArgs()'

======================================================================
Inspecting script file get_TreeHeight.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: DataWrangTidy.R
#Desc: Function that calculates heights of trees given distance of each tree from its base and angle to its top, using the trigonometric formula
#Arguments: Degrees and distance but not required manually as there is a default of 'trees.csv' from data
#Outputs: Heights of the tree, same units as distance
#Date: Oct 2019  

"""
This function calculates heights of trees given distance of each tree
from its base and angle to its top, using  the trigonometric formula

height = distance * tan(radians)

INPUTS
system arguments: 
None given: Takes as default trees.csv from data 
Argument given: has to specific path to data but uses as input based that it is in same layout as trees.csv

ARGUMENTS
degrees:   The angle of elevation of tree
distance:  The distance from base of tree (e.g., meters)

OUTPUT
The heights of the tree, same units as "distance"
"""
import math
import sys
import csv
import scipy as sc
import pandas as pd
import numpy as np
####################################################
# Define functions
####################################################


def Treeheight(degrees, distance):
    """ Defining tree height function """
    radians = (degrees * math.pi) / 180
    height = distance * math.tan(radians)
    return height
########################################################
# Importing csv
########################################################

# take system argument defined file name if there is one otherwise use the default trees.csv
if len(sys.argv) >1:
    trees = pd.read_csv(sys.argv[1]) #reads csv of system argument 
else:
    trees = pd.read_csv('../data/trees.csv', header =0) #reads in default data with header 

Treeheight(30, 40)

angle = trees["Angle.degrees"] #Subsets trees data to angle column and saves to a variable
distance = trees["Distance.m"] #Subsets trees data to distance column and saves to a variable 

h = np.array([]) #empty array to append heights to within below for loop

for i in range(0,len(angle)): #Goes through the length of the angle variable to get length of data 
    height = Treeheight(angle[i],distance[i]) #applies function to in each variable 
    h = np.append(h,height) #Appends the calculated height the array below the last calculation 
trees["Height.m"] = h #adds variable of height to trees csv and gives it the title Height.m 
trees.to_csv('../results/pythontrees_extra.csv')**********************************************************************

Testing get_TreeHeight.py...

get_TreeHeight.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "get_TreeHeight.py", line 65, in <module>
    trees.to_csv('../results/pythontrees_extra.csv')
  File "/usr/lib/python3/dist-packages/pandas/core/frame.py", line 1332, in to_csv
    formatter.save()
  File "/usr/lib/python3/dist-packages/pandas/core/format.py", line 1481, in save
    compression=self.compression)
  File "/usr/lib/python3/dist-packages/pandas/io/common.py", line 354, in _get_handle
    f = open(path, mode, errors='replace')
FileNotFoundError: [Errno 2] No such file or directory: '../results/pythontrees_extra.csv'

======================================================================
Inspecting script file GPDD_Data.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: GPDD_Data.R
#Desc: Loads and plots the species abundance worldwide using the maps package and saves it as a pdf	
#Arguments: Uses GPDDFiltered.RData in data
#Outputs: Species abundance worldwide
#Date: Oct 2019  

#Map of the world American
#Load the data
load("../data/GPDDFiltered.RData")
#require the maps package 
library("maps")

#select database of the world and include all of the regions
map(database = "world", regions = ".")
#plot the data and select the plot colour, size and shape 
points(gpdd$long, gpdd$lat, pch = 16, col = "green", cex = 1)

#
**********************************************************************

Testing GPDD_Data.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.20754s

======================================================================
Inspecting script file boilerplate.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: boilerplate.R
#Desc: Illustrates how R functions work
#Arguments: Two arguments defined within script	
#Outputs: Class of inputs
#Date: Oct 2019  


#Illustrates how R functions work and takes as input 
#Already defined inputs and returns the class of these inputs

MyFunction <- function(Arg1, Arg2){

  # Statements involving Arg1, Arg2:
  print(paste("Argument", as.character(Arg1), "is a", class(Arg1))) # print Arg1's type
  print(paste("Argument", as.character(Arg2), "is a", class(Arg2))) # print Arg2's type

  return (c(Arg1, Arg2)) #this is optional, but very useful
}

MyFunction(1,2) #test the function
MyFunction("Riki","Tiki") #A different test
**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Riki is a character"
[1] "Argument Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.12505s

======================================================================
Inspecting script file TreeHeight.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: TreeHeight.R
#Desc: ACalculates heights of trees given distance of each tree from its base and angle to its top, using the trigonometric formula
#Arguments: Two arguments, degrees: The angle of elevation of tree; distance: The distance from base of tree (e.g., meters). Or it can take the relative path of a data file and calculate the tree height. 
#As a default it uses the trees.csv file in data
#Outputs: TreeHts.csv in results containing tree heights data appended onto trees.csv
#Date: Oct 2019  


# This function calculates heights of trees given distance of each tree
# from its base and angle to its top, using  the trigonometric formula
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"
ts <- read.csv("../data/trees.csv", header = TRUE)


TreeHeight <- function(degrees, distance){
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  #print(paste("Tree height is:", height))

  return (height)
}

#applied function on the ts data using the angle and distance columns as iputs 
a <- TreeHeight(ts$Angle.degrees, ts$Distance.m)
ts$Height <- a #adds a new column to ts 

write.csv(ts, "../results/TreeHts.csv") #saves as csv 
**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
Calls: write.csv -> eval.parent -> eval -> eval -> write.table -> file
In addition: Warning message:
In file(file, ifelse(append, "a", "w")) :
  cannot open file '../results/TreeHts.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file PP_Lattice.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: PP_Lattice.R
#Desc: Script that makes three pdf lattices of prey mass, predator mass and the size ratio of prey mass over predator mass. 
#Script also calculates the mean, median and log of these for prey mass, predator mass and size ratio into a csv file. 
#Script calculates this for the data subsetted by feeding type
#Arguments: EcolArchives-E089-51-D1.csv from data- no manual input
#Outputs: 3 pdf and a csv file with values
#Date: Oct 2019  

#Script that makes three pdf lattices of prey mass, predator mass and the size ratio of prey mass over predator mass.
#Script also calculates the mean, median and log of these for prey mass, predator mass and size ratio into a csv file.
#Script calculates this for the data subsetted by feeding type.

#Reads the data in and assigns the table to a variable
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

#requires lattice from library to plot a lattice plot 
library(lattice)

pdf("../results/Pred_Lattice.pdf", # Open blank pdf page using a relative path
    11.7, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF) #Plots the data
dev.off()


pdf("../results/Prey_Lattice.pdf", # Open blank pdf page using a relative path
    11.7, 8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()

pdf("../results/SizeRatio_Lattice.pdf", # Open blank pdf page using a relative path
    11.7, 8.3)
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()

#Uses diplyr to calculate mean and medians of all the categories; prey mass, predator mass and rato

dat2 <- ddply(MyDF, "Type.of.feeding.interaction", summarise, mean=mean(Predator.mass), median=median(Predator.mass), log_mean= mean(log(Predator.mass)), log_median= median(log(Predator.mass)))
dat3 <- ddply(MyDF, "Type.of.feeding.interaction", summarise, mean=mean(Prey.mass), median=median(Prey.mass), log_mean= mean(log(Prey.mass)), log_median= median(log(Prey.mass)))
dat4 <- ddply(MyDF, "Type.of.feeding.interaction", summarise, mean=mean(Prey.mass/Predator.mass), median=median(Prey.mass/Predator.mass), log_mean= mean(log(Prey.mass/Predator.mass)), log_median= median(log(Prey.mass/Predator.mass)))

#Binds the dataframes with means together
my_frame <- rbind(dat2,dat3,dat4)
#Adds rows titles to the dataframe
a <- c('Predator_mass', 'Prey_mass', 'Prey_predator_size_ratio')
b <- rep(a, each= 5)

#Adds row
my_frame$Category <- b
#Gives column names
my_frame <- my_frame[ ,c("Category", "Type.of.feeding.interaction", "mean", "median", "log_mean", "log_median")]
#Writes csv
write.csv(my_frame, "../results/PP_Results.csv", row.names = FALSE)

**********************************************************************

Testing PP_Lattice.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Error in pdf("../results/Pred_Lattice.pdf", 11.7, 8.3) : 
  cannot open file '../results/Pred_Lattice.pdf'
Execution halted

======================================================================
Inspecting script file next.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: next.R
#Desc: A for loop that runs through 1-10 and prints every other number or number that isnt equal to 2
#Arguments: No input
#Outputs: i in for loop
#Date: Oct 2019  

### print every other number in look 
## print a number that isnt equal to 2 
for (i in 1:10) {
  if ((i %% 2) == 0)
    next # pass to next iteration of loop
  print(i)
}
**********************************************************************

Testing next.R...

Output (only first 500 characters): 

**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.12427s

======================================================================
Inspecting script file Ricker.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: Ricker.R
#Desc: A vectorization challenge that runs a simulation of the Ricker model and returns a vector of length generations
#Arguments: No input	
#Outputs: Plots Ricker model
#Date: Oct 2019  

#This defines the ricker function 
# Runs a simulation of the Ricker model
# Returns a vector of length generations
Ricker <- function(N0=1, r=1, K=10, generations=50)
{

  N <- rep(NA, generations)    # Creates a vector of NA

  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}

#### PLOT MODEL 
plot(Ricker(generations=10), type="l") #plots the ricker model 
**********************************************************************

Testing Ricker.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.16657s

======================================================================
Inspecting script file Girko.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: Girko.R
#Desc: Function that returns an eclipse
#Arguments: No input
#Outputs: Girko.pdf in results with eclipse
#Date: Oct 2019  

require(ggplot2)

# Function that builds the ecipse 
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}



N <- 250 # Assign size of the matrix

M <- matrix(rnorm(N * N), N, N) # Build the matrix

eigvals <- eigen(M)$values # Find the eigenvalues

eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe

my_radius <- sqrt(N) # The radius of the circle is sqrt(N)

ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse

names(ellDF) <- c("Real", "Imaginary") # rename the columns


# plot the eigenvalues

p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")

# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))

#Saves the variable of the plot to a pdf
pdf("../results/Girko.pdf")
p
dev.off()








**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Loading required package: ggplot2
Error in pdf("../results/Girko.pdf") : 
  cannot open file '../results/Girko.pdf'
Execution halted

======================================================================
Inspecting script file Vectorize1.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: Vectorize.R
#Desc: A vectorisation example which compares the time taken to run a vectorisation function compared to a loop
#Arguments: No input
#Outputs:Time taken for loop and in build vectorisation function to run
#Date: Oct 2019  

#A vectorisation example which compares the time taken to run 
#a vectorisation function compares to aa loop 
M <- matrix(runif(1000000),1000,1000)

#Function sums all elements in a matrix whilst using the ocordinates of the matrix via a nested for loop 
SumAllElements <- function(M){
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]){
    for (j in 1:Dimensions[2]){
      Tot <- Tot + M[i,j]
    }
  }
  return (Tot)
}

#times how long a looped and vectorised functiont akes and compares them 
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Using loops, the time taken is:"
   user  system elapsed 
  0.084   0.000   0.083 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.004   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.25904s

======================================================================
Inspecting script file SQLinR.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: SQLin.R
#Desc: EScript to demonstrate how data can be used to access update and manage databases easily
#Arguments: Has default data entry
#Outputs: TNo output as dataframes removed from global environment after script is run
#Date: Oct 2019 

#install the sqlite package
install.packages('sqldf')

# To load the packages
library(sqldf)

# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')

# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
            (OriginalID TEXT,
            ConKingdom TEXT,
            ConPhylum TEXT,
            ConSpecies TEXT)")

# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data

dbSendQuery(conn = db,
            "INSERT INTO Consumer
            VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
dbSendQuery(conn = db,
            "INSERT INTO Consumer
            VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
dbSendQuery(conn = db,
            "INSERT INTO Consumer
            VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")


# Once we have our table, we can query the results using:

dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")


# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.

Resource <- read.csv("../data/Resource.csv")  # Read csv files into R

# Import data frames into database
dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)

# Check that the data have been correctly imported into the School table.
dbListTables(db)                 # The tables in the database
dbListFields(db,"Resource")       # The columns in a table
dbReadTable(db, "Resource")    # The data in a table

# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
dbDisconnect(db)            # Close connection
rm(list = c("Resource"))   # Remove data frames

**********************************************************************

Testing SQLinR.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Installing package into ‘/usr/local/lib/R/site-library’
(as ‘lib’ is unspecified)
Warning in install.packages("sqldf") :
  'lib = "/usr/local/lib/R/site-library"' is not writable
Error in install.packages("sqldf") : unable to install packages
Execution halted

======================================================================
Inspecting script file break.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: break.R
#Desc: Script showing how to break out of loop
#Arguments: No input
#Outputs: Depending on if value is equal to 10 will output what number is equal to
#Date: Oct 2019  


#Breaking out of loops, often need to break out of loops when a certain conditions is met 
i <- 0 #Initatlise i
while(i <Inf) { 
  if (i == 10) {
    break
  } # Break out of the while loop!
  else {
    cat("i equals ", i, "\n") # says what i is equal to in iterations from 0 to 10 
    i <- i +1 #Update i
  }
}
**********************************************************************

Testing break.R...

Output (only first 500 characters): 

**********************************************************************
i equals  0 
i equals  1 
i equals  2 
i equals  3 
i equals  4 
i equals  5 
i equals  6 
i equals  7 
i equals  8 
i equals  9 

**********************************************************************

Code ran without errors

Time consumed = 0.12403s

======================================================================
Inspecting script file plotLin.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: plotLin.R
#Desc: A script that plots data and adds linear regression line
#Arguments: No input
#Outputs: pdf called 'MyLinReg.pdf' in results
#Date: Oct 2019  


x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                   parse = TRUE, size = 6, 
                   colour = "blue")
#Saves variable to pdf 
pdf("../results/MyLinReg.pdf")
p
dev.off()
**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Error in ggplot(my_data, aes(x = x, y = y, colour = abs(my_lm$residual))) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file basic_io.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: basic_io.R
#Desc: Script to illustrate the different ways to write in a file and different parameters
#Arguments: No manual input required but uses trees.csv data from data directory
#Outputs: csv file names MyData in global environment
#Date: Oct 2019  

# A simple script to illustrate R input-output.
# Run line by line and check inputs putput to
# understand what is happening

# import with headers
MyData <- read.csv("../data/trees.csv", header = TRUE)

# Write it out as a new file
write.csv(MyData, "../results/MyData.csv")

# Append to it
write.table(MyData[1,], file = "../results/MyData.csv", append=TRUE)

# Write row names
write.csv(MyData, "../results/MyData.csv", row.names=TRUE)

# Ignore column names
write.table(MyData, "../results/MyData.csv", col.names=FALSE)

**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
Calls: write.csv -> eval.parent -> eval -> eval -> write.table -> file
In addition: Warning message:
In file(file, ifelse(append, "a", "w")) :
  cannot open file '../results/MyData.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file Vectorize1.py...

File contents are:
**********************************************************************

#!/usr/bin/python

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: Vectorize1.py
#Desc: A vectorisation example which compares the time taken to run a vectorisation function compared to a loop, this script is the python version of 'Vectorize1.R'
#Arguments: No input
#Outputs:Time taken for loop and in build vectorisation function to run
#Date: Oct 2019  

""" A vectorisation example which compares the time taken to run a vectorisation function 
compared to a loop, this script is the python version of 'Vectorize1.R' """

#A vectorisation example which compares the time taken to run 
#a vectorisation function compares to aa loop 
import numpy as np
import time 
M = np.random.uniform(1000000,size=(1000,1000)) #Make a matrix of random numbers 1000 by 1000 

#defines a function called SumAllElements that takes as input M

def SumAllElements(M):
  """ Defines a function called SumALLElements take takes as input M which is a matrix of random numbers 
  Function sums all elements in a matrix using coordinates 
  """
  Dimensions = M.shape #saves the dimensions of M using .shape to a variable called dimensions
  Tot = 0 #Assigns 0 to a variable called Tot
  for i in range(0,Dimensions[0]): #Indexex the dimensions variable to the first column via 0 and also runs through the whole 1000 numbers 
    for j in range(0,Dimensions[1]): #Indexes second collumn or value of Dimensions via [1] and runs through all numbers 
      Tot = Tot + M[i,j] #Indexs the coordinates of i an j of the matrix and adds the of the element to the variable Tot
  return (Tot)

#Stores current time as a variable then runs the function and subtracts start time to get speed of function and returns the running tiem 
# Does this for the looped version: 
start_time = time.time()
SumAllElements(M)
runningtime = time.time() - start_time
print("Using loops, the time taken is:", runningtime)

# Does this for the vectorized version: 
start_time = time.time()
M.sum
runningtime = time.time() - start_time
print("Using the in-built vectorized function, the time taken is:", runningtime)

**********************************************************************

Testing Vectorize1.py...

Vectorize1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.0

Output (only first 500 characters): 

**********************************************************************
Using loops, the time taken is: 0.18059015274047852
Using the in-built vectorized function, the time taken is: 1.1920928955078125e-06

**********************************************************************

Code ran without errors

Time consumed = 0.32785s

======================================================================
Inspecting script file try.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: try.R
#Desc: Demonstrates how to use try to catch errors in script- Runs a simulation that involves sampling from a synthetic 
#population with replacement and takes its mean, but only if at least 30 unique samples are obtained
#Arguments: No input
#Outputs:Prints errors in script to variable
#Date: Oct 2019  

#Using try to catch errors in the script 

#Function that rus a simulation that involves sampling from a synthetic population with 
#replacement and takes its mean, but only if at least 30 unique samples are obtained 
doit <- function(x){
	temp_x <- sample(x, replace = TRUE)
	if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
		 print(paste("Mean of this sample was:", as.character(mean(temp_x))))
		} 
	else {
		stop("Couldn't calculate mean: too few unique values!")
		}
	}

#Generates a random population 
popn <- rnorm(50)

#Using apply to run the function
lapply(1:15, function(i) doit(popn))

#Using apply and using try 
result <- lapply(1:15, function(i) try(doit(popn), FALSE))

#About is long but it shows you which runs ran into error and why 
result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
	result[[i]] <- try(doit(popn), FALSE)
	}
#Errors put into variable 
print(result)

**********************************************************************

Testing try.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Mean of this sample was: -0.17500777687805"
[1] "Mean of this sample was: 0.0558174899886804"

**********************************************************************

Encountered error (or warning):
Error in doit(popn) : Couldn't calculate mean: too few unique values!
Calls: lapply -> FUN -> doit
Execution halted

======================================================================
Inspecting script file apply2.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: apply2.R
#Desc: Function of if statement that states if a number is lower than 0 multiple it by 100
#Arguments: Manual input not essential but can put number/matrix for function to be applied over	
#Outputs: Matrix of random numbers function has been applied over
#Date: Oct 2019  

#How to use apply to define your own functions. 
#This function is an if statement that states if a number is lower than 0 multiple it by 100 
#and return the output
#Output: Matrix of random numbers that the function has been applied over.

SomeOperation <- function(v){ #What does this function?
  if (sum(v) > 0){ # if the sum of the input number is greater than zero 
    return (v * 100) # Multiple by 100 
  }
  return(v) # Return the mutiplied number 
}

M <- matrix(rnorm(100), 10, 10) # makes matrix of random numbers 10 by 10
print (apply(M, 1, SomeOperation)) #Use apply to apply the function above on every number in the matrix 
**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 

**********************************************************************
           [,1]       [,2]        [,3]        [,4]        [,5]       [,6]
 [1,] -75.64570   87.46407   17.483997  1.62286424    1.331953 -54.321410
 [2,]  96.46618  -40.04160  -43.941673 -0.96897592 -117.484155   3.243319
 [3,]  66.18909  128.14074   70.762887  0.34835055  167.065038 -29.737407
 [4,]   3.71175   27.71532   76.578418  1.28700905   -1.747769 141.498245
 [5,] 146.70560   71.36728  -47.664284 -0.70863867   18.094101 127.881415
 [6,] -51.15271 -108.37546    1.269193 -1.36649274   14.7
**********************************************************************

Code ran without errors

Time consumed = 0.13176s

======================================================================
Inspecting script file AutoCorr.tex...

File contents are:
**********************************************************************
```
\documentclass[12pt]{article}

\title{Autocorrelation in weather: Are temperatures of one year significantly correlated with the next year across years in a given location?}

\author{Emma Deeks}

\date{24/10/18}

\begin{document}
    \maketitle

    \begin{abstract}

    \end{abstract}

    \section{Introduction}
        The Autocorrelation exercise calculate the correlation coefficient on temperatures in successive years. A Pearsons correlation test found the correlation between temperatures of successive years to be signfiicant (r = 0.326, n = 99, p < 0.01).
        When randomly computing the time series there were no correlatio coefficients higher than the significant correlation. This indicates a true significance from the analysis and further adds to evidence of rising temperatures. 

  
    \section{Materials \& Methods}

  


    \bibliographystyle{plain}
    \bibliography{FirstBiblio}
\end{document}
```**********************************************************************

Testing AutoCorr.tex...

======================================================================
Inspecting script file get_TreeHeight.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: get_TreeHeight.R
#Desc: Function that calculates heights of trees given distance of each tree from its base and angle to its top, using the trigonometric formula
#Arguments: You must input the name of the csv file but not the .csv at the end e.g. if your trees data is found in the data directory and is called
# trees.csv you only need to put trees into the command line e.g. Rscript get_TreeHeight.R trees
#Outputs: Heights of the tree, same units as distance
#Date: Oct 2019  

#Define function TreeHeight 
TreeHeight <- function(degrees, distance){
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  print(paste("Tree height is:", height))
  return (height)
}

#Makes the user input by making the commandArgs true 
arg1 <- commandArgs(TRUE)
#Takes to the directory 
ts <- read.csv(paste("../data/", arg1[1],".csv",  sep=""))

#assigns a to the heights of the trees in the ts data given the indexed inputs
a <- TreeHeight(ts$Angle.degrees, ts$Distance.m)
ts$Height.m <- a #appends this new vector of heights to the data frame as a new column called Heights.m

#writes a csv of the newdataframe and calls it the system argument follows by heights and csv. 
write.csv(ts, paste("../results/",arg1[1],"_heights.csv", sep = ""), row.names = FALSE)
**********************************************************************

Testing get_TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../data/NA.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file TAutoCorr.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: TAutoCorr.R
#Desc: An exercise in correlation coefficients and P-values. Calculates the correlation between n-1 pairs of years in temperature, script loads the KeyWestAnnualMeanTemperature data 
#using load and computes the coefficient for this data before randomly shuffling the data 10000 times to randomly permute the time series and then recalculate the correlation 
#coefficient for each randomly permuted year sequence and storing it.
#Arguments: No manual input but uses the KeyWestAnnualMeanTemperature data	
#Outputs: TThe fraction of the correlation coefficients from the previous step were greater that that from step 1. Also out outputs a Latex file interpreting results. Also outputs pdf of graph for lattice.
#Date: Oct 2019  

#an excercise in correlation coefficients and P-values.
#Calculates the correlation between n-1 pairs of years in temperature,
#script loads the KeyWestAnnualMeanTemperature data using load and computes the coefficient for this data
#Then randomly shuffles the data 10000 times to randomly permute the time series and then recalculate the correlation coefficient for each randonly permuted year sequence and storing it.
#Output: The fraction of the correlation coefficients from the previous step were greater that that from step 1.
#Also out outputs a Latex file interpreting results.

load("../data/KeyWestAnnualMeanTemperature.RData")
plot(ats)

#Adding new column
ats$sucyear <- ats$Temp
#Permuting function to shift columns
shift2 <- function(x, n) `length<-`(tail(x, -n), length(x))
#Shifting columns by applying function
ats <- transform(ats, sucyear = shift2(sucyear, 1))
#Removing final row
ats1 <- ats[-nrow(ats),]
#This is removing the first column as its not needed for loop
#Working out correlation and storing to variable
correlation <- cor(ats1$Temp, ats1$sucyear, method = "pearson")

#creating variable with number for for loop- this is mainly for trouble shooting
replicate <- 10000
#Creates empty dataframe
df <- as.data.frame(matrix(nrow = 100, ncol = 2))
#Creates empty vector
add_cor <- c()
#for loop for 1 to the number in vector
#Adds puts column from ats into first row then shuffles it in second row
#Runs correlation
#Shift rows up using re defined function
#removes final line
#Runs correlation and appends to empty vector
for (i in 1:replicate){ #from one to 1000 (replicate)
  df$V1 <- sample(ats$Temp) 
  df$V2 <- df$V1
  df <- transform(df, V2 = shift2(V2, 1))
  ats_df <- df[-nrow(df),]
  add_cor <- append(add_cor, cor(ats_df$V1, ats_df$V2, method = "pearson"))
}

#counts vaues that is higher than the first correlation coeffcient
count = 0
for (x in add_cor){
  if (x > correlation){
    count = count-1
  }
}

#Calculates fraction that is above the first coefficient
fraction <- count/replicate
print(fraction)

#Makes a pdf of results for the Latex summary
pdf("../results/TAutoCorr.pdf")
plot(add_cor, col= "black", ylim = c(-0.4, 0.4), pch = 16, ylab= "Correlation coeffiient") +
  points(correlation, col = "red", pch = 16)
dev.off()



**********************************************************************

Testing TAutoCorr.R...

Output (only first 500 characters): 

**********************************************************************
[1] -2e-04

**********************************************************************

Encountered error (or warning):
Error in pdf("../results/TAutoCorr.pdf") : 
  cannot open file '../results/TAutoCorr.pdf'
Execution halted

======================================================================
Inspecting script file Vectorize2.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: Vectorize2.R
#Desc: Two scripts, one stochastic Ricker model and an improved version of this model which is vectorised
#Arguments: No input
#Outputs:Speed comparison of both scripts
#Date: Oct 2019  

# Runs the stochastic Ricker equation with gaussian fluctuations
#two scripts, one stochastic Ricker model and another and improved version of this model which is vectorised
#Output: Speed comparion of both scripts

stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
  #initialize
  N<-matrix(NA,numyears,length(p0))
  N[1,]<-p0

  for (pop in 1:length(p0)){#loop through the populations

    for (yr in 2:numyears){ #for each pop, loop through the years

      N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))

    }

  }
  return(N)

}

print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))


###### Improved function ########

stochrickvect<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
  #initialize
  N<-matrix(NA,numyears,length(p0))
  N[1,]<-p0
  
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:

#loop through the populations---- Takes out pop in script
#speeds up loop as its now been vectorised

for (yr in 2:numyears){ #for each pop, loop through the years

      N[yr,] <- N[yr-1,] * exp(r * (1 - N[yr - 1,] / K) + rnorm(1,0,sigma)) #Take out the pop part of the for loop as it is not nessearily needed for the loop and takes extra time

  }

  return(N)
}

print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))

**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Stochastic Ricker takes:"
   user  system elapsed 
  0.244   0.020   0.235 
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.012   0.000   0.010 

**********************************************************************

Code ran without errors

Time consumed = 0.36485s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: DataWrangTidy.R
#Desc: Script illustrating how to 'wrangle' data using the 'dplyr' and 'tidyr' package and other functions in R	
#Arguments: No manual input required but uses the PoundHillData.csv and PoundHillMetaData.csv from data
#Outputs: Both inputted datasets are in an improved format and under variable names 'MyData' and 'MyMetaData' respectively
#Date: Oct 2019  
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

############# Inspect the dataset ###############
require(dplyr) #Instead of reshape its the dplyr and tidyr packages 
require(tidyr)

glimpse(MyData) # different ways to look at data using diplyr
tbl_df(MyData) # different ways to look at data using diplyr
dim(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)#stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############

require(dplyr)
require(tidyr)
#This is using gather to convert data from wide to long format
# instead of melt from reshape2 gather is used to convert data from wide to long format 
MyWrangledData <- TempData %>% gather(Species, Count, -Cultivation, -Block, -Plot, -Quadrat)

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

glimpse(MyWrangledData) #some more diplr and tidyr functions 
tbl_df(MyWrangledData)
dim(MyWrangledData)


**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 

**********************************************************************
 chr [1:45, 1:60] "Cultivation" "Block" "Plot" "Quadrat" ...
 - attr(*, "dimnames")=List of 2
  ..$ : NULL
  ..$ : chr [1:60] "V1" "V2" "V3" "V4" ...
# A tibble: 45 x 60
   V1    V2    V3    V4    V5    V6    V7    V8    V9    V10   V11   V12   V13  
   <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>
 1 Cult… octo… octo… octo… octo… octo… may   may   may   may   may   march march
 2 Block a     a     a     a     a     a     a     a     a     a     a     a    
 3 Plot
**********************************************************************

Encountered error (or warning):
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: tidyr

======================================================================
Inspecting script file preallocate.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: preallocate.R
#Desc: Illustrating the speed of allocation with one loop having preallocated values and one not
#Arguments: No input	
#Outputs: Speeds of two for loops
#Date: Oct 2019  

#Illustrating the speed of preallocation
# pre-allocate is quicker as it is more specific in arguments 
a <- NA
for (i in 1:10) {
  a <- c(a, i)
  print(a)
  print(object.size(a))
}

a <- rep(NA, 10)
for (i in 1:10) {
  a[i] <- i
  print(a)
  print(object.size(a))
}

**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 

**********************************************************************
[1] NA  1
48 bytes
[1] NA  1  2
56 bytes
[1] NA  1  2  3
56 bytes
[1] NA  1  2  3  4
72 bytes
[1] NA  1  2  3  4  5
72 bytes
[1] NA  1  2  3  4  5  6
72 bytes
[1] NA  1  2  3  4  5  6  7
72 bytes
[1] NA  1  2  3  4  5  6  7  8
88 bytes
 [1] NA  1  2  3  4  5  6  7  8  9
88 bytes
 [1] NA  1  2  3  4  5  6  7  8  9 10
88 bytes
 [1]  1 NA NA NA NA NA NA NA NA NA
88 bytes
 [1]  1  2 NA NA NA NA NA NA NA NA
88 bytes
 [1]  1  2  3 NA NA NA NA NA NA NA
88 bytes
 [1]  1  2  3  4 NA NA NA NA NA NA
88 byte
**********************************************************************

Code ran without errors

Time consumed = 0.20047s

======================================================================
Inspecting script file PP_Regress_loc.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: PP_Regress.R
#Desc: Script that calculates the regression of data when its been subsetted three times and outputs the results to a table in csv format
#Arguments: EcolArchives-E089-51-D1.csv from data- no manual input
#Outputs: csv file with the linear results; 'PP_Regress_loc_Results.csv' in results directory
#Date: Oct 2019  


MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

############## csv ##############
#Creates an empty dataframe

Orange = as.data.frame(matrix(nrow = 1, ncol = 8)) # dataframe has 8 coluns for the third subset 

#For loop that uses two inputs to the for loop which is the two things you are subsetting
#t is the variable for the data once its been subsetted once, and predator lifestage is assigned to i
#and then subsetted again and type of feeding interaction is assigned to j
#a linear regression is run on the subsette ddata
#p is a variable then then puts the outputs of the vector in order
#p then goes into the re made dataframe.

# this is the same for loop as PP_Regress.R except with an additional subset equal to h 
for(i in levels(MyDF$Predator.lifestage)){
  for(j in levels(MyDF$Type.of.feeding.interaction)){
    for(h in levels(MyDF$Location)){
    t = subset(MyDF, MyDF$Predator.lifestage == i)
    t = subset(t, t$Type.of.feeding.interaction == j)
    t = subset(t, t$Location == h)
    if (dim(t)[1] > 0){
      mylm <- summary(lm(Predator.mass~Prey.mass, data = t))
      p <- c(i,j,h,mylm$coefficients[1], mylm$coefficients[2], mylm$adj.r.squared, mylm$fstatistic[1], mylm$coefficients[8])
      Orange = rbind(Orange, p)
    }
    }
  }
}

#takes off certain rows and then writes csv to a file
Orange <- Orange[-c(1, 17),]
colnames(Orange) <- c("Predator_Lifestage", "Feeding_interaction", "Location", "Intercept", "Slope", "Adjusted_R_sequared", "FStat", "Pvalue")
write.csv(Orange, file = "../results/PP_Regress_loc_Results.csv")




**********************************************************************

Testing PP_Regress_loc.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Warning messages:
1: In summary.lm(lm(Predator.mass ~ Prey.mass, data = t)) :
  essentially perfect fit: summary may be unreliable
2: In summary.lm(lm(Predator.mass ~ Prey.mass, data = t)) :
  essentially perfect fit: summary may be unreliable
3: In summary.lm(lm(Predator.mass ~ Prey.mass, data = t)) :
  essentially perfect fit: summary may be unreliable
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
Calls: write.csv -> eval.parent -> eval -> eval -> write.table -> file
In addition: Warning message:
In file(file, ifelse(append, "a", "w")) :
  cannot open file '../results/PP_Regress_loc_Results.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file DataWrang.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript 

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: DataWrang.R
#Desc: Script illustrating how to 'wrangle' data using the reshape2 package and other functions in R
#Arguments: No manual input required but uses the PoundHillData.csv and PoundHillMetaData.csv from data
#Outputs: Both inputted datasets are in an improved format and under variable names 'MyData' and 'MyMetaData' respectively
#Date: Oct 2019  

################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F)) 

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0



############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function


MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Exploring the data (extend the script below)  ###############**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 

**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00408s

======================================================================
Inspecting script file MyBars.R...

File contents are:
**********************************************************************
#!/usr/bin/env Rscript

#Author: Emma Deeks ead19@imperial.ac.uk
#Script: MyBars.R
#Desc: Script that builds a plot and saves as a pdf
#Arguments: Text file of Resuts.txt from data directory
#Outputs: pdf called 'MyBars.pdf' in results directory
#Date: Oct 2019  

require(ggplot2)

## read in table results.txt 
a <- read.table("../data/Results.txt", header = TRUE)

#add a column to the tble 
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros

# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y1,
  size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)

# Print the second linerange
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y2,
  size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)

# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
  x = x,
  ymin = ymin,
  ymax = y3,
  size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)

# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))

# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
                            breaks = seq(3, 5, by = 0.05)) + 
  scale_y_continuous("My y axis") + 
  theme_bw() + 
  theme(legend.position = "none") 

#save variable as a pdf 
pdf("../results/MyBars.pdf")
p
dev.off()
**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Loading required package: ggplot2
Error in file(file, "rt") : cannot open the connection
Calls: read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../data/Results.txt': No such file or directory
Execution halted

======================================================================
======================================================================
Finished running scripts

Ran into 17 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!